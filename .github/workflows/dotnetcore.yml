name: .NET Core

on:
  push:
    branches: 
      - dev
      - tech/actions 
      - master
  pull_request:
    branches: 
      - dev

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ubuntu-latest, windows-latest]
    steps:
    

    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101   
    - name: set environment variables
      uses: allenevans/set-env@v1.0.0
      with:
          TESTS_PATH: './ParserTests'
          PUBLISH_NUGET: true
          RUN_TESTS: false
          MAIN_CSPROJ: 'formulae/formulae.csproj'
    - name: Printenv
      run: |
          echo "publichs=${PUBLISH_NUGET}"
          echo "main=${MAIN_CSPROJ}"
          printenv  
    - name: Build with dotnet 
      run: dotnet build --configuration Release 
    - name: Test with dotnet
      if: (env.RUN_TESTS || false)
      run: dotnet test -c Debug  #uses msbuild.rsp for coverlet configuration
    - name: coveralls      
      uses: coverallsapp/github-action@v1.1.1
      if: matrix.os == 'windows-latest' && (env.RUN_TESTS || false)
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }} 
        path-to-lcov: ${env.TESTS_PATH}/lcov.info 
    - name: push
      if: matrix.os == 'ubuntu-latest' && env.PUBLISH_NUGET
      id: publish_nuget
      uses: brandedoutcast/publish-nuget@v2.5.2
      with:
          VERSION_REGEX: <version>(.*)<\/version>  
          PROJECT_FILE_PATH: ${{env.MAIN_CSPROJ}}
          NUGET_KEY: ${{secrets.NUGET_KEY}}
          VERSION_FILE_PATH: ${{env.MAIN_CSPROJ}}
    - name: Create Release
      if: ${{ success() && matrix.os == 'windows-latest' && steps.publish_nuget.outputs.VERSION != ''  && steps.publish_nuget.outputs.VERSION != null }}
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.publish_nuget.outputs.VERSION }}
        release_name: Release ${{ steps.publish_nuget.outputs.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      if: ${{ success() && matrix.os == 'windows-latest' && steps.create_release.outputs.upload_url != ''  && steps.create_release.outputs.upload_url != null }}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.publish_nuget.outputs.PACKAGE_PATH }}
        asset_name: ${{ steps.publish_nuget.outputs.PACKAGE_NAME }}
        asset_content_type: application/zip
